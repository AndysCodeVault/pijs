[{"name":"arc","description":"Draws an arc on the screen.","isScreen":true,"parameters":["x","y","radius","angle1","angle2"],"pdata":["The x coordinate of the center point of the arc's circle.","The y coordinate of the center point of the arc's circle.","The radius of the arc's circle.","The starting angle.","The ending angle."],"seeAlso":["bezier","circle","draw","ellipse","line","rect","paint","point","pset","setColor"],"example":"$.screen(\"300x200\");\r\n$.arc(150, 100, 50, 45, 270);"},{"name":"bezier","description":"Draws a bezier curve on the screen.","isScreen":true,"parameters":["xStart","yStart","x1","y1","x2","y2","xEnd","yEnd"],"pdata":["The x coordinate of the starting point of the line.","The y coordinate of the starting point of the line.","The x coordinate of the first control point.","The y coordinate of the first control point.","The x coordinate of the second control point.","The y coordinate of the second control point.","The x coordinate of the ending point of the line.","The y coordinate of the ending point of the line."],"seeAlso":["arc","circle","draw","ellipse","line","rect","paint","point","pset","setColor"],"example":"$.screen(\"300x200\");\r\n$.bezier({\r\n\t\"xStart\": 15,\r\n\t\"yStart\": 10,\r\n\t\"x1\": 45,\r\n\t\"y1\": 135,\r\n\t\"x2\": 195,\r\n\t\"y2\": 75,\r\n\t\"xEnd\": 280,\r\n\t\"yEnd\": 185\r\n});"},{"name":"cancelInput","description":"Cancels all previous input commands.","isScreen":true,"parameters":["name"],"pdata":["[OPTIONAL] The name provided to the input command."],"seeAlso":["input"],"example":"$.screen(\"300x200\");\r\n$.print(\"\\n\");\r\n$.input(\"What is your name?\", null);\r\n$.onkey( \"Escape\", \"down\", function () {  \r\n\t$.print(\"\\nInput Canceled\");\r\n\t$.cancelInput();\r\n}, true );"},{"name":"canvas","description":"Returns the canvas element used by the screen.","isScreen":true,"parameters":[],"example":"$.screen(\"300x200\");\r\n$.canvas().className = \"purple\";\r\n$.print(\"\\n\\nThe background is now purple.\");"},{"name":"circle","description":"Draws a circle on the screen.","isScreen":true,"parameters":["x","y","radius","fillColor"],"pdata":["The x coordinate of the center of the circle.","The y coordinate of the center of the circle.","The radius of the circle.","[OPTIONAL]. The fill color for the circle."],"seeAlso":["arc","bezier","draw","ellipse","line","rect","paint","point","pset","setColor"],"example":"$.screen(\"300x200\");\r\n$.circle(150, 100, 50, \"red\");"},{"name":"clearEvents","description":"Clears event handlers for mouse and touch events on the screen.","isScreen":false,"parameters":[],"seeAlso":["offmouse","offpress","offtouch","onmouse","onpress","ontouch"],"example":"$.screen( \"300x200\" );\r\n$.print( \r\n\t\"Move mouse or touch to paint screen,\" +\r\n\t\" click/touch up to stop.\"\r\n);\r\n$.onpress( \"move\", pressMove );\r\n$.onpress( \"up\", pressStop );\r\n\r\n// Press move function\r\nfunction pressMove( data ) {\r\n\t$.setPosPx( data.x, data.y );\r\n\tvar pos = $.getPos();\r\n\t$.setPos( pos.col, pos.row );\r\n\t$.setColor( 8 );\r\n\t$.print( \"+\", true );\r\n}\r\n\r\n// Press stop function\r\nfunction pressStop() {\r\n\t$.setColor( 14 );\r\n\tvar pos = $.getPos();\r\n\t$.setPos( pos.col - 4, pos.row );\r\n\t$.print( \"Stopped!\", true );\r\n\t$.clearEvents();\r\n}"},{"name":"clearKeys","description":"Clears event handlers for keyboard events.","isScreen":false,"parameters":[],"seeAlso":["onkey"],"example":"$.screen(\"300x200\");\r\n$.print(\"\\n\");\r\n$.onkey( \"any\", \"down\", function (key) {\r\n\t$.print(key.key + \" pressed.\");\r\n});\r\n$.onkey( \"Escape\", \"down\", function (key) {\r\n\t$.print(key.key + \" pressed.\");\r\n\t$.clearKeys();\r\n});"},{"name":"cls","description":"Clears the screen.","isScreen":true,"parameters":["x","y","width","height"],"pdata":["[OPTIONAL] The x coordinate of the upper left corner of the area to clear.","[OPTIONAL] The y coordinate of the upper left corner of the area to clear.","[OPTIONAL] The width of the area to clear.","[OPTIONAL] The height of the area to clear."],"example":"$.screen(\"300x200\");\r\n$.line(0, 0, 300, 200);\r\n$.onkey(\"any\", \"down\", function () {\r\n\t$.cls();\r\n});"},{"name":"createAudioPool","description":"\tCreates a group of audio players that can play sounds. Audio pools are useful if you want to\r\n\tplay a sound multiple times without reloading it each time. The number of audio players you\r\n\tspecify determines how many sounds you can play simultanously. If you only want to play one\r\n\tsound at a time set 1 for the poolSize.","isScreen":false,"parameters":["src","poolSize"],"pdata":["The source of the audio file.","[OPTIONAL] The number of audio players."],"seeAlso":["deleteAudioPool","playAudioPool","setVolume","stopAudioPool"],"example":"var bombPool = $.createAudioPool( \"/sounds/bomb.wav\", 1 );\r\n$.ready( function () {\r\n\t$.playAudioPool( bombPool );\r\n} );\r\n"},{"name":"deleteAudioPool","description":"Deletes an audio pool.","isScreen":false,"parameters":["audioId"],"pdata":["The id of the audio pool."],"seeAlso":["createAudioPool","playAudioPool","setVolume","stopAudioPool"],"example":"var bombPool = $.createAudioPool(\"/sounds/bomb.wav\", 1);\r\n$.deleteAudioPool(bombPool);"},{"name":"draw","description":"Draws lines on the screen defined by a string.","isScreen":true,"parameters":["drawString"],"pdata":["Case insensitive string that contains commands for drawing.","<ul style='margin:0'>\r\n<li><span class='gray'>\"B\"</span> (blind) before a line move designates that the line move will be hidden.</li>\r\n<li><span class='gray'>\"Cn\"</span> designates the color attribute.</li>\r\n<li><span class='gray'>\"Mn, n\"</span> can move to another coordinate (x, y) area of the screen.</li>\r\n<li><span class='gray'>\"N\"</span> Will return to the starting position after the line is drawn.</li>\r\n<li><span class='gray'>\"Pn\"</span> is used to paint enclosed objects.</li>\r\n<li><span class='gray'>\"Dn\"</span> draws a line vertically DOWN n pixels.</li>\r\n<li><span class='gray'>\"En\"</span> draws a diagonal / line going UP and RIGHT n pixels each direction.</li>\r\n<li><span class='gray'>\"Fn\"</span> draws a diagonal  line going DOWN and RIGHT n pixels each direction.</li>\r\n<li><span class='gray'>\"Gn\"</span> draws a diagonal / LINE going DOWN and LEFT n pixels each direction.</li>\r\n<li><span class='gray'>\"Hn\"</span> draws a diagonal  LINE going UP and LEFT n pixels each direction.</li>\r\n<li><span class='gray'>\"Ln\"</span> draws a line horizontally LEFT n pixels.</li>\r\n<li><span class='gray'>\"Rn\"</span> draws a line horizontally RIGHT n pixels.</li>\r\n<li><span class='gray'>\"Un\"</span> draws a line vertically UP n pixels.</li>\r\n<li><span class='gray'>\"An\"</span> can use values of 1 to 3 to rotate up to 3 90 degree(270) angles.</li>\r\n<li><span class='gray'>\"TAn\"</span> can use any n angle from -360 to 0 to 360 to rotate a DRAW (Turn Angle).</li>\r\n</ul>"],"seeAlso":["arc","bezier","circle","ellipse","line","rect","paint","point","pset","setColor"],"example":"$.screen( \"300x200\" );\r\n$.pset( 150, 100 );\r\n$.draw( \"C2 R15 D15 L30 U15 R15\" );\t\t\t\t\t\t// Draw House\r\n$.draw( \"B G4 C1 L6 D6 R6 U6 BG3 P1\" ); \t\t\t\t// Draw Window\r\n$.draw( \"B E3 B R14 C1 L6 D6 R6 U6 BG3 P1\" ); \t// Draw Window\r\n$.draw( \"B E3 B R1 P2\" );\t\t\t\t\t\t\t\t\t\t// Paint House\r\n$.draw( \"B E4 B U C6 H15 G15 B R5 P6\" );\t\t\t\t// Draw Roof\r\n"},{"name":"drawImage","description":"Draws an image on to the screen.  Note: this method will fail if it gets called before the image is loaded.","isScreen":true,"parameters":["name","x","y","angle","anchorX","anchorY","alpha","scaleX","scaleY"],"pdata":["Name or id of the image.","Horizontal coordinate.","Vertical coordinate.","[OPTIONAL] Rotate the image in degrees.","[OPTIONAL] Horizontal rotation coordinate.","[OPTIONAL] Vertical rotation coordinate.","[OPTIONAL] Transparency amount number 0-100.","[OPTIONAL] Horizontal scaling amount.","[OPTIONAL] Vertical scaling amount."],"seeAlso":["drawSprite","loadImage","ready"],"example":"$.screen( \"300x200\" );\r\nvar monkey = $.loadImage( \"/images/monkey.png\" );\r\n$.ready( function () {\r\n\t$.drawImage( monkey, 150, 100, 0, 0.5, 0.5 );\r\n} );\r\n"},{"name":"drawSprite","isScreen":true,"description":"Draws a sprite from a spritesheet on to the screen. Note: this method will fail if it gets called before the sprite image is loaded.","parameters":["name","frame","x","y","angle","anchorX","anchorY","alpha","scaleX","scaleY"],"pdata":["Name or id of the spritesheet.","Frame number of the specific sprite on the spritesheet.","Horizontal coordiante.","Vertical coordinate.","[OPTIONAL] Rotate the image in degrees.","[OPTIONAL] Horizontal rotation coordinate.","[OPTIONAL] Vertical rotation coordinate.","[OPTIONAL] Transparency amount number 0-100.","[OPTIONAL] Horizontal scaling amount.","[OPTIONAL] Vertical scaling amount."],"seeAlso":["drawImage","getSpritesheetData","loadSpritesheet","ready"],"example":"var monkey, frame, interval;\r\n$.screen( \"300x200\" );\r\nmonkey = $.loadSpritesheet( \"/images/monkey.png\", null, 32, 32, 1 );\r\n$.ready( function () {\r\n\tframe = 0;\r\n\tinterval = setInterval( run, 500 );\r\n\tfunction run() {\r\n\t\tframe += 1;\r\n\t\t$.cls();\r\n\t\t$.drawSprite( monkey, frame % 2, 150, 100, 0, 0.5, 0.5, null, 2, 2 );\r\n\t}\r\n\trun();\r\n} );","onclose":"clearInterval( interval );\r\n"},{"name":"ellipse","description":"Draws an ellipse on to the screen.","isScreen":true,"parameters":["x","y","radiusX","radiusY","fillColor"],"pdata":["Horizontal coordiante.","Vertical coordinate.","Horizontal radius.","Vertical radius","[OPTIONAL]. Fill color for the ellipse."],"seeAlso":["arc","bezier","circle","draw","line","rect","paint","point","pset","setColor"],"example":"$.screen(\"300x200\");\r\n$.ellipse(150, 100, 50, 80, \"blue\");"},{"name":"filterImg","description":"Filters a screens colors.","isScreen":true,"parameters":["filter"],"pdata":["Function to be called on each pixel."],"seeAlso":["setColor"],"example":"$.screen(\"300x200\");\r\n$.circle(150, 100, 50, \"red\");\r\n$.filterImg(function (color, x, y) {\r\n\tcolor.r = color.r - Math.round( Math.tan( ( x + y ) / 10 ) * 128 );\r\n\tcolor.g = color.g + Math.round( Math.cos( x / 7 ) * 128 );\r\n\tcolor.b = color.b + Math.round( Math.sin( y / 5 ) * 128 );\r\n\treturn color;\r\n});"},{"name":"findColor","isScreen":true,"description":"Given a color value, find the index from the color palette.","parameters":["color","tolerance","isAddToPalette"],"pdata":["The color to be found.","[OPTIONAL] The percentage of how close the color has to be to match. Returns the fist match.","[OPTIONAL] Add the color to the palette if its not found."],"seeAlso":["setColor"],"returns":"The color index of the color found","example":"$.screen(\"300x200\");\r\nvar color = $.findColor(\"red\");\r\n$.setColor(color);\r\n$.print(\"The index of red is \" + color + \".\");\r\n"},{"name":"get","description":"Gets an area of pixels from the screen and returns an array of color indices.\r\nIt's counterpart, the put method, copies the contents of the array back onto\r\nthe screen.\r\n","isScreen":true,"parameters":["x1","y1","x2","y2","tolerance"],"pdata":["First horizontal coordiante.","First vertical coordinate.","Second horizontal coordiante.","Second vertical coordinate.","[OPTIONAL]. If the color is not in the color palette then attempt to find the closest fit color."],"returns":"A 2-dimensional array of color indices.","seeAlso":["put"],"example":"$.screen( \"300x200\" );\r\n$.circle( 150, 110, 50, 4 );\r\nvar colors = $.get( 105, 85, 110, 90 );\r\n$.print( \"[\" );\r\nfor( var i = 0; i < colors.length; i++ ) {\r\n\t$.print( \"    [ \" + colors[ i ].join( \", \" ) + \" ],\" );\r\n}\r\n$.print( \"]\" );\r\n$.put( colors, 20, 80 );\r\n"},{"name":"getCols","description":"Gets the max number of printable characters in a row on the screen.","isScreen":true,"parameters":[],"seeAlso":["getPos","getPosPx","getRows","print","setFont","setFontSize","setPos","setPosPx"],"returns":"An integer containing the max number of printable characters for a row on the screen.","example":"// Print a line of *'s on the top of the screen\r\n$.screen( \"300x200\" );\r\nvar cols = $.getCols();\r\nvar msg = \"\";\r\nfor( var i = 0; i < cols; i++ ) {\r\n\tmsg += \"*\";\r\n}\r\n$.print( msg );\r\n"},{"name":"getDefaultPal","description":"Gets default palette and returns an array with all the color data. The default color palette defines what colors are\r\navailable when a new screen is created.\r\n","isScreen":false,"parameters":[],"seeAlso":["findColor","getPal","getPixel","setBgColor","setColor","setPalColor","swapColor"],"returns":"An array of color data for the default color palette.","example":"$.screen(\"300x200\");\r\nvar pal = $.getDefaultPal();\r\n$.setColor( 4 );\r\n$.print( pal[ 4 ].s );\r\n"},{"name":"getPal","isScreen":true,"description":"Gets the current color palette from the screen and returns an array with all the color data.","parameters":[],"seeAlso":["findColor","getDefaultPal","getPixel","setBgColor","setColor","setPalColor","swapColor"],"returns":"An array of color data for the current screen's color palette.","example":"$.screen(\"300x200\");\r\nvar pal = $.getPal();\r\n$.setColor( 2 );\r\n$.print( pal[ 2 ].s );\r\n"},{"name":"getPixel","description":"Gets the pixel color from the screen and returns the color data.","isScreen":true,"parameters":["x","y"],"pdata":["The horizontal coordinate for the pixel","The vertical coordinate for the pixel"],"seeAlso":["get","findColor","point","put","setColor"],"returns":"The color data { r: red, g: green, b: blue, a: alpha: s: rgbaString, s2: hexString }.","example":"$.screen( \"300x200\" );\r\n$.setColor( 5 );\r\n$.pset( 55, 55 );\r\nvar pixel = $.getPixel( 55, 55 );\r\n$.print( pixel.s );\r\n"},{"name":"getPos","description":"Gets the position of the print cursor and returns the coordinates. The data\r\nreturned is an object containing a row and a column. Example: { row: 5, col: 5 }. The rows\r\nand columns are based on a grid system using the size of the font and not on exact pixels.\r\n","isScreen":true,"parameters":[],"seeAlso":["getPosPx","print","setPos","setPosPx"],"returns":"An object containing the row and col of the print cursor.","example":"$.screen( \"300x200\" );\r\n$.setPos( 5, 5 );\r\nvar pos = $.getPos();\r\n$.print( pos.row + \", \" + pos.col );\r\n"},{"name":"getPosPx","description":"Gets the position of the print cursor and returns the coordinates. The data\r\nreturned is an object containing a row and a column. Example: { x: 5, y: 5 }. The x\r\nand y coordinates are based on top left corner pixel position of the print cursor.","isScreen":true,"parameters":[],"seeAlso":["getPos","print","setPos","setPosPx"],"returns":"An object containing the pixel coordinates of the print cursor.","example":"$.screen(\"300x200\");\r\n$.setPosPx(15, 15);\r\nvar pos = $.getPosPx();\r\n$.print(pos.x + \", \" + pos.y);\r\n"},{"name":"getRows","description":"Gets the max number of printable characters in a column on the screen.","isScreen":true,"parameters":[],"seeAlso":["getPos","getPosPx","getCols","print","setFont","setFontSize","setPos","setPosPx"],"returns":"An integer containing the number of rows of printable characters on a screen.","example":"// Print a line of *'s on the left of the screen\r\n$.screen(\"300x200\");\r\nvar rows = $.getRows();\r\nvar msg = \"\";\r\nfor(var i = 0; i < rows; i++) {\r\n\tmsg += \"*\\n\";\r\n}\r\n$.print(msg);\r\n"},{"name":"getScreen","description":"Gets the screen based on a screen id.","isScreen":false,"parameters":["screenId"],"pdata":["An integer that identifies a screen that was previously created using the screen command."],"seeAlso":["screen"],"returns":"A screen object that contains a reference to all the methods that can be called on a screen.","example":"$.screen( \"300x200\" );\r\nvar $screen = $.getScreen( 0 );\r\n$screen.print( \"This is screen 0.\" );\r\n"},{"name":"getSpritesheetData","isScreen":true,"parameters":["name"],"description":"Gets information on the spritesheet including the total number of frames, and width and height of each frame.\r\n","pdata":["The name of the spritesheet."],"returns":"An object containing the frame count and an array with the width and height of each frame.","seeAlso":["drawSprite","loadSpritesheet","ready"],"example":"var frame, interval, frameData, monkeySpritesheet;\r\n$.screen( \"300x200\" );\r\nmonkeySpritesheet = $.loadSpritesheet( \"/images/monkey.png\" );\r\n$.ready( function () {\r\n\tframeData = $.getSpritesheetData( monkeySpritesheet );\r\n\tframe = 0;\r\n\tinterval = setInterval( run, 500 );\r\n\tfunction run() {\r\n\t\tframe += 1;\r\n\t\t$.cls();\r\n\t\t$.drawSprite( monkeySpritesheet, frame % frameData.frameCount, 150, 100, 0, 0.5, 0.5 );\r\n\t}\r\n\trun();\r\n} );","onclose":"clearInterval( interval );\r\n"},{"name":"height","description":"Returns the height of the screen.","isScreen":true,"parameters":[],"returns":"A number containing the height of the screen.","seeAlso":["screen","width"],"example":"$.screen( \"300x200\" );\r\n$.print( \"Height: \" + $.height() );\r\n"},{"name":"ingamepads","description":"Gets the most recent gamepad status.","isScreen":false,"parameters":[],"seeAlso":["ongamepad"],"returns":"An array of gamepad objects.\r\n","example":"var x, y, frame;\r\n$.screen( \"300x200\" );\r\n$.setColor( 15 );\r\nx = 150;\r\ny = 100;\r\nframe = requestAnimationFrame( run );\r\nfunction run( dt ) {\r\n\tvar pads, factor;\r\n\tfactor = dt / 2500;\r\n\tpads = $.ingamepads();\r\n\t$.cls();\r\n\tif( pads.length > 0 ) {\r\n\t\tx = $.util.clamp( x + pads[ 0 ].axes2[ 0 ] * factor, 0, 299 );\r\n\t\ty = $.util.clamp( y + pads[ 0 ].axes2[ 1 ] * factor, 0, 199 );\r\n\t\t$.circle( Math.floor( x ), Math.floor( y ) , 10 );\r\n\t\t$.pset( Math.floor( x ), Math.floor( y ) );\r\n\t}\r\n\tframe = requestAnimationFrame( run );\r\n}\r\n","onclose":"cancelAnimationFrame( frame );\r\n"},{"name":"inkey","description":"Gets the most recent status of keys.","returns":"If the first parameter is left blank then it will return an array of key data objects. If not then it returns the\r\nan object containing data for a single key.","isScreen":false,"parameters":["key"],"pdata":["[OPTIONAL] Name (string) or keyCode (integer) of key to return the status. Leave blank for the status of all keys that have been pressed."],"seeAlso":["input","inpress","inmouse","intouch"],"example":"$.screen( \"300x200\" );\r\nvar frame = requestAnimationFrame( run );\r\nfunction run() {\r\n\tvar keys, key;\r\n\tkeys = $.inkey();\r\n\t$.cls();\r\n\t$.print( \"Press any key\" );\r\n\tfor( key in $.inkey() ) {\r\n\t\t$.print( \"--------------------------\" );\r\n\t\t$.print( \"key:      \" + keys[ key ].key );\r\n\t\t$.print( \"location: \" + keys[ key ].location );\r\n\t\t$.print( \"code:     \" + keys[ key ].code );\r\n\t\t$.print( \"keyCode:  \" + keys[ key ].keyCode );\r\n\t}\r\n\tframe = requestAnimationFrame( run );\r\n}\r\n","onclose":"cancelAnimationFrame( frame );\r\n"},{"name":"inmouse","description":"Gets the most recent mouse status.","isScreen":true,"parameters":[],"returns":"An object containing data about the mouse's position and button status.","seeAlso":["inpress","offmouse","onmouse","startMouse","stopMouse"],"example":"$.screen( \"4x4\" );\r\nvar interval = setInterval( function () {\r\n\tvar mouse = $.inmouse();\r\n\tif( mouse.buttons > 0 ) {\r\n\t\t$.setColor( Math.floor( Math.random() * 9 ) + 1 );\r\n\t\t$.pset( mouse.x, mouse.y );\r\n\t}\r\n}, 50 );\r\n","onclose":"clearInterval( interval );\r\n"},{"name":"inpress","description":"Gets the most recent mouse or touch status.","isScreen":true,"parameters":[],"returns":"An object containing data about the mouse or touch position and press status.","seeAlso":["inmouse","intouch","offmouse","onpress","ontouch","onmouse","setPinchZoom","startMouse","startTouch","stopMouse","stopTouch"],"example":"$.screen( \"4x4\" );\r\n$.startTouch();\r\n$.setPinchZoom( false );\r\nvar interval = setInterval( function () {\r\n\tvar press = $.inpress();\r\n\tif( press.buttons > 0 ) {\r\n\t\t$.setColor( Math.floor( Math.random() * 9 ) + 1 );\r\n\t\t$.pset( press.x, press.y );\r\n\t}\r\n}, 50 );\r\n","onclose":"clearInterval( interval );\r\n"},{"name":"input","isScreen":true,"parameters":["prompt","callback","isNumber","isInteger","allowNegative","onscreenKeyboard"],"description":"Shows a prompt on screen and allows a user type in a string. The prompt is ended when the user\r\npresses the return key. There are two ways to get the data returned. The function returns a\r\npromise that will pass the response data. You can also pass a callback function which will get\r\ncalled when the enter key is pressed.\r\n","pdata":["[OPTIONAL] The text that will display when the user is entering text.","[OPTIONAL] A function you can pass which will get called when the user presses the return key.","[OPTIONAL] Limit the data to numeric data only.","[OPTIONAL] Limit the data to integer values only.","[OPTIONAL] A boolean that indicates if negative numbers are allowed.","[OPTIONAL] A string value that can specify an onscreen keyboard valid values include: \"auto\", \"always\", \"none\"."],"seeAlso":["cancelInput","inkey","setInputCursor"],"returns":"A promise that will return the users response.","example":"$.screen( \"300x200\" );\r\naskQuestions();\r\nasync function askQuestions() {\r\n\tvar name = await $.input( \"What is your name? \" );\r\n\tvar age = await $.input( \"How old are you? \", null, true, true, false, \"always\" );\r\n\t$.print( \"Your name is \" + name + \" you are \" + age + \" years old.\" );\r\n}\r\n"},{"name":"intouch","description":"Gets the most recent touch status.","isScreen":true,"parameters":[],"returns":"An array of touch objects.","seeAlso":["inpress","offtouch","onpress","ontouch","setPinchZoom","startTouch","stopTouch"],"example":"$.screen( \"4x4\" );\r\n$.startTouch();\r\n$.setPinchZoom( false );\r\nvar interval = setInterval( function () {\r\n\tvar touches = $.intouch();\r\n\tif( touches.length > 0 ) {\r\n\t\t$.setColor( Math.floor( Math.random() * 9 ) + 1 );\r\n\t\t$.pset( touches[ 0 ].x, touches[ 0 ].y );\r\n\t}\r\n}, 50 );\r\n","onclose":"clearInterval( interval );\r\n"},{"name":"line","isScreen":true,"parameters":["x1","y1","x2","y2"],"description":"Draws a line on the screen.","pdata":["The first x coordinate of the line.","The first y coordinate of the line.","The second x coordinate of the line.","The second y coordinate of the line."],"seeAlso":["arc","bezier","circle","draw","ellipse","rect","paint","point","pset","setColor","setPen"],"example":"$.screen( \"300x200\" );\r\n$.setColor( 4 );\r\n$.line( 15, 15, 285, 185 );\r\n$.setColor( 2 );\r\n$.line( 15, 185, 285, 15 );\r\n"},{"name":"loadFont","isScreen":false,"parameters":["fontSrc","width","height","charSet","isBitmap"],"description":"Loads a font from an image or encoded string.","pdata":["The source location of the image or the encoded string location.","The width of each character in the font.","The height of each character in the font.","[OPTIONAL] A string or an array of integers containing the ascii value for each font character in order.","[OPTIONAL] Boolean to use the font as a bitmap font versus a pixel font. Pixel fonts (default) are slower but can change colors."],"returns":"The id of the font.","seeAlso":["print","setDefaultFont","setFont"],"example":"var font = $.loadFont( \r\n  \"gnsh-bitmapfont-colour2.png\", 5, 12, \r\n  \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]\" +\r\n  \"^_`abcdefghijklmnopqrstuvwxyz{|}~\"\r\n);\r\n$.ready( function () {\r\n\t$.screen( \"300x200\" );\r\n  $.setBgColor( \"#241c1c\" );\r\n\t$.setFont( font );\r\n  $.print();\r\n\t$.print( \" Hello World!\" );\r\n\t$.print( \" 123456789\" );\r\n\t$.print( \" #$%&?\" );\r\n} );\r\n"},{"name":"loadImage","description":"Loads an image for later use in the drawImage command. It is recommended to use the ready command after loadImage and before calling the drawImage command.\r\n","isScreen":false,"parameters":["src","name"],"pdata":["The source location of an image file or an image element.","[OPTIONAL]. A name you can use to refer to the image later in the drawImage command. Ifleft blank then the name will be created automatically."],"returns":"The name of image to use with the drawImage command.","seeAlso":["drawImage","loadImage","ready"],"example":"$.screen( \"300x200\" );\r\n$.loadImage( \"/images/monkey.png\", \"monkey\" );\r\n$.ready( function () {\r\n\t$.drawImage( \"monkey\", 150, 100, 0, 0.5, 0.5 );\r\n} );\r\n"},{"name":"loadSpritesheet","isScreen":false,"parameters":["src","name","width","height","margin"],"description":"Loads an image for later use in the drawSprite command. It is recommended to use the ready command after loadSpritesheet and before calling the drawSprite command. If you do not provide a\r\nwidth and height the frames will be auto generated. Use getSpritesheetData to get info on the\r\nframe count and frame dimensions.\r\n","pdata":["The source location of an image file or an image element.","[OPTIONAL]. The name of the sprite for use in the drawSprite command.","[OPTIONAL]. The width of each sprite in the spritesheet.","[OPTIONAL]. The height of each sprite in the spritesheet.","[OPTIONAL]. A margin in pixels around each sprite."],"returns":"The name of the spritesheet. The name auto generated if it is left blank.","seeAlso":["drawSprite","getSpritesheetData","ready"],"example":"var frame, interval;\r\n$.screen( \"300x200\" );\r\n$.loadSpritesheet( \"/images/monkey.png\", \"monkey\" );\r\n$.ready( function () {\r\n\tframe = 0;\r\n\tinterval = setInterval( run, 500 );\r\n\tfunction run() {\r\n\t\tframe += 1;\r\n\t\t$.cls();\r\n\t\t$.drawSprite( \"monkey\", frame % 2, 150, 100, 0, 0.5, 0.5 );\r\n\t}\r\n\trun();\r\n} );","onclose":"clearInterval( interval );\r\n"},{"name":"offclick","isScreen":true,"parameters":["fn"],"description":"Removes a hitbox from the screen created by the onclick command.\r\n","pdata":["The function that was used to create the hitbox by the onclick command."],"seeAlso":["onclick"],"example":"$.screen( \"300x200\" );\r\nvar hitBox = {\r\n\t\"x\": 25,\r\n\t\"y\": 25,\r\n\t\"width\": 100,\r\n\t\"height\": 100\r\n};\r\n\r\n// Draw a green box\r\n$.setColor( 2 );\r\n$.rect( hitBox );\r\n\r\n// Setup the onclick function for the hitBox\r\n$.onclick( clickBox, false, hitBox );\r\n\r\n// Click function\r\nfunction clickBox() {\r\n\r\n\t// Draw a red box\r\n\t$.setColor( 4 );\r\n\t$.rect( hitBox );\r\n\t$.offclick( clickBox );\r\n\r\n\t// Wait a second then clear the box\r\n\tsetTimeout( function () {\r\n\t\t$.setColor( 0 );\r\n\t\t$.rect( hitBox );\r\n\t}, 1000 );\r\n}\r\n"},{"name":"offgamepad","isScreen":false,"parameters":["gamepadIndex","mode","item","fn"],"description":"Removes a gamepad event created by the ongamepad command.\r\n","pdata":["The index of the gamepad.","The event mode must be one of the following strings: connect, disconnect, axis,pressed, touched, pressReleased, touchReleased.","The index of the button or axis for the event. Use the string 'any' for any button or axis.","The function to be called back for the event."],"seeAlso":["ingamepads","ongamepad","stopGamepads"],"example":"$.screen( \"300x300\" );\r\n$.print( \"Press button 3 to stop\" );\r\n$.ongamepad( 0, \"pressed\", \"any\", pressButton );\r\n$.ongamepad( 0, \"pressed\", 3, stop );\r\n\r\n// Press button function\r\nfunction pressButton( btn ) {\r\n\tconsole.log( btn );\r\n\t$.print( \"Button \" + btn.index + \" pressed\" );\r\n}\r\n\r\n// Stop function\r\nfunction stop() {\r\n\t$.offgamepad( 0, \"pressed\", \"any\", pressButton );\r\n\t$.offgamepad( 0, \"pressed\", 3, stop );\r\n\t$.print( \"Stopped\" );\r\n}\r\n"},{"name":"offkey","isScreen":false,"parameters":["key","mode","fn"],"description":"Removes an onkey event.\r\n","pdata":["The key that was used in the onkey command.","The mode can be up or down.","The function that was used to create the hitbox by the onclick command."],"seeAlso":["onkey"],"example":"$.screen( \"300x200\" );\r\n$.print( \"Press any key.\" );\r\n$.print( \"Press q to stop\" );\r\n$.onkey( \"any\", \"down\", keyPress );\r\n$.onkey( \"Q\", \"down\", stopPress );\r\n\r\n// Key press function\r\nfunction keyPress( key ) {\r\n\t$.print( \"You pressed \" + key.key + \"!\" );\r\n}\r\n\r\n// Stop key press function\r\nfunction stopPress() {\r\n\t$.print( \"You pressed Q! Stopping.\" );\r\n\t$.offkey( \"any\", \"down\", keyPress );\r\n\t$.offkey( \"Q\", \"down\", keyPress );\r\n}\r\n"},{"name":"offmouse","isScreen":true,"parameters":["mode","fn"],"description":"Removes an onmouse event.\r\n","pdata":["The mode must be a string and can be up, down, or move.","The function that was used to create the hitbox by the onclick command."],"seeAlso":["clearEvents","inmouse","onmouse","startMouse","stopMouse"],"example":"$.screen( \"300x200\" );\r\n$.print( \"Move mouse to paint screen, click to stop.\" );\r\n$.onmouse( \"move\", mouseMove );\r\n$.onmouse( \"up\", mouseStop, true );\r\n\r\n// Mouse move function\r\nfunction mouseMove( data ) {\r\n\t$.setPosPx( data.x, data.y );\r\n\tvar pos = $.getPos();\r\n\t$.setPos( pos.col, pos.row );\r\n\t$.setColor( 8 );\r\n\t$.print( \"+\", true );\r\n}\r\n\r\n// Mouse stop function\r\nfunction mouseStop() {\r\n\t$.setColor( 14 );\r\n\tvar pos = $.getPos();\r\n\t$.setPos( pos.col - 4, pos.row );\r\n\t$.print( \"Stopped!\", true );\r\n\t$.offmouse( \"move\", mouseMove );\r\n}\r\n"},{"name":"offpress","isScreen":true,"parameters":["mode","fn"],"description":"Removes an onpress event.\r\n","pdata":["The mode must be a string and can be up, down, or move.","The function that was used to create the hitbox by the onpress command."],"seeAlso":["clearEvents","inpress","onpress","setPinchZoom","startMouse","startTouch","stopMouse","stopTouch"],"example":"$.screen( \"300x200\" );\r\n$.print( \"Move mouse or touch to paint screen, click/touch up to stop.\" );\r\n$.onpress( \"move\", pressMove );\r\n$.onpress( \"up\", pressStop, true );\r\n\r\n// Press move function\r\nfunction pressMove( data ) {\r\n\t$.setPosPx( data.x, data.y );\r\n\tvar pos = $.getPos();\r\n\t$.setPos( pos.col, pos.row );\r\n\t$.setColor( 8 );\r\n\t$.print( \"+\", true );\r\n}\r\n\r\n// Press stop function\r\nfunction pressStop() {\r\n\t$.setColor( 14 );\r\n\tvar pos = $.getPos();\r\n\t$.setPos( pos.col - 4, pos.row );\r\n\t$.print( \"Stopped!\", true );\r\n\t$.offpress( \"move\", pressMove );\r\n}\r\n"},{"name":"offtouch","isScreen":true,"parameters":["mode","fn"],"description":"Removes an ontouch event.\r\n","pdata":["The mode must be a string and can be start, end, or move.","The function that was used to create the hitbox by the onpress command."],"seeAlso":["clearEvents","intouch","ontouch","setPinchZoom","startTouch","stopTouch"],"example":"$.screen( \"300x200\" );\r\n$.print( \"Touch and drag to paint screen, touch up to stop.\" );\r\n$.ontouch( \"move\", touchMove );\r\n$.ontouch( \"end\", touchStop, true );\r\n\r\n// Touch move function\r\nfunction touchMove( touches ) {\r\n\t$.setPosPx( touches[ 0 ].x, touches[ 0 ].y );\r\n\tvar pos = $.getPos();\r\n\t$.setPos( pos.col, pos.row );\r\n\t$.setColor( 8 );\r\n\t$.print( \"+\", true );\r\n}\r\n\r\n// Touch stop function\r\nfunction touchStop() {\r\n\t$.setColor( 14 );\r\n\tvar pos = $.getPos();\r\n\t$.setPos( pos.col - 4, pos.row );\r\n\t$.print( \"Stopped!\", true );\r\n\t$.offtouch( \"move\", touchMove );\r\n}\r\n"},{"name":"onclick","isScreen":true,"parameters":["fn","once","hitBox","customData"],"description":"Creates an area on the screen that when the user clicks in that area a function is called. In order for a click event to trigger the user must move the mouse cursor over the hitbox area and\r\nmouse down and mouse up over that area.\r\n","pdata":["The function that gets called when the area is clicked.","Boolean if set to true the event will be deleted after it is clicked.","[OPTIONAL]. The hitBox area for where the click event will occur. { x, y, width, height }.","[OPTIONAL]. This can be used to assign data that will be passed into the callback event. This is useful if you have multiple onclick commands that use the same callback function."],"seeAlso":["offclick"],"example":"$.screen( \"300x200\" );\r\nvar hitBox = {\r\n\t\"x\": 25,\r\n\t\"y\": 25,\r\n\t\"width\": 100,\r\n\t\"height\": 100\r\n};\r\n\r\n// Draw a green box\r\n$.setColor( 2 );\r\n$.rect( hitBox );\r\n\r\n// Setup the onclick function for the hitBox\r\n$.onclick( clickBox, true, hitBox );\r\n\r\n// Click function\r\nfunction clickBox() {\r\n\r\n\t// Draw a red box\r\n\t$.setColor( 4 );\r\n\t$.rect( hitBox );\r\n\r\n\t// Wait a second then clear the box\r\n\tsetTimeout( function () {\r\n\t\t$.setColor( 0 );\r\n\t\t$.rect( hitBox );\r\n\t}, 1000 );\r\n}\r\n"},{"name":"ongamepad","isScreen":false,"parameters":["gamepadIndex","mode","item","fn","once","customData"],"description":"Creates a gamepad event listener.\r\n","pdata":["The index of the gamepad.","The event mode must be one of the following strings: connect, disconnect, axis,pressed, touched, pressReleased, touchReleased.","The index of the button or axis for the event. Use the string 'any' for any button or axis.","The function to be called back for the event.","Boolean if set to true the event will be deleted after it is triggered.","[OPTIONAL]. This can be used to assign data that will be passed into the callback event. This is useful if you have multiple ongamepad commands that use the same callback function."],"seeAlso":["ingamepads","ongamepad","stopGamepads"],"example":"$.screen( \"300x300\" );\r\n$.print( \"Press button 3 to stop\" );\r\n$.ongamepad( 0, \"pressed\", \"any\", pressButton );\r\n$.ongamepad( 0, \"pressed\", 3, stop );\r\n\r\n// Press button function\r\nfunction pressButton( btn ) {\r\n\t$.print( \"Button \" + btn.index + \" pressed\" );\r\n}\r\n\r\n// Stop function\r\nfunction stop() {\r\n\t$.offgamepad( 0, \"pressed\", \"any\", pressButton );\r\n\t$.offgamepad( 0, \"pressed\", 3, stop );\r\n\t$.print( \"Stopped\" );\r\n}\r\n"},{"name":"onkey","isScreen":false,"parameters":["key","mode","fn","once"],"description":"Creates an onkey event.\r\n","pdata":["A string, ascii value, or array of keys to register for an event.","The mode can be up or down. The mode must be down if using an array for key combination","The function that was used to create the hitbox by the onclick command.","[OPTIONAL]. Boolean if true will delete event after the first time it is triggered."],"seeAlso":["offkey"],"example":"$.screen( \"300x200\" );\r\n$.print( \"Press any key.\" );\r\n$.print( \"Press q to stop\" );\r\n$.onkey( \"any\", \"down\", keyPress );\r\n$.onkey( \"Q\", \"down\", stopPress, true );\r\n\r\n// Key press function\r\nfunction keyPress( key ) {\r\n\t$.print( \"You pressed \" + key.key + \"!\" );\r\n}\r\n\r\n// Stop key press function\r\nfunction stopPress() {\r\n\t$.print( \"You pressed Q! Stopping.\" );\r\n\t$.offkey( \"any\", \"down\", keyPress );\r\n}\r\n"},{"name":"onmouse","isScreen":true,"parameters":["mode","fn","once","hitBox","customData"],"description":"Creates a onmouse event.\r\n","pdata":["The mode must be a string and can be up, down, or move.","The function to callback when the event occurs.","[OPTIONAL]. A boolean if true deletes the event after being called one time.","[OPTIONAL]. A hitBox to restrict events occuring outside the box","[OPTIONAL]. This can be used to assign data that will be passed into the callback event. This is useful if you have multiple onmouse commands that use the same callback function."],"seeAlso":["clearEvents","inmouse","offmouse","startMouse","stopMouse"],"example":"$.screen( \"300x200\" );\r\n$.print( \"Move mouse to paint screen, click to stop.\" );\r\n$.onmouse( \"move\", mouseMove );\r\n$.onmouse( \"up\", mouseStop, true );\r\n\r\n// Mouse move function\r\nfunction mouseMove( data ) {\r\n\t$.setPosPx( data.x, data.y );\r\n\tvar pos = $.getPos();\r\n\t$.setPos( pos.col, pos.row );\r\n\t$.setColor( 8 );\r\n\t$.print( \"+\", true );\r\n}\r\n\r\n// Mouse stop function\r\nfunction mouseStop() {\r\n\t$.setColor( 14 );\r\n\tvar pos = $.getPos();\r\n\t$.setPos( pos.col - 4, pos.row );\r\n\t$.print( \"Stopped!\", true );\r\n\t$.offmouse( \"move\", mouseMove );\r\n}\r\n"},{"name":"onpress","isScreen":true,"parameters":["mode","fn","once","hitBox","customData"],"description":"Creates a press event which activates on mouse or touch.\r\n","pdata":["The mode must be a string and can be up, down, or move.","The function to callback when the event occurs.","[OPTIONAL]. A boolean if true deletes the event after being called one time.","[OPTIONAL]. A hitBox to restrict events occuring outside the box","[OPTIONAL]. This can be used to assign data that will be passed into the callback event. This is useful if you have multiple onmouse commands that use the same callback function."],"seeAlso":["clearEvents","inpress","offpress","setPinchZoom","startMouse","startTouch","stopMouse","stopTouch"],"example":"$.screen( \"300x200\" );\r\n$.print( \r\n\t\"Move mouse or touch to paint screen,\" +\r\n\t\" click/touch up to stop.\"\r\n);\r\n$.onpress( \"move\", pressMove );\r\n$.onpress( \"up\", pressStop, true );\r\n\r\n// Press move function\r\nfunction pressMove( data ) {\r\n\t$.setPosPx( data.x, data.y );\r\n\tvar pos = $.getPos();\r\n\t$.setPos( pos.col, pos.row );\r\n\t$.setColor( 8 );\r\n\t$.print( \"+\", true );\r\n}\r\n\r\n// Press stop function\r\nfunction pressStop() {\r\n\t$.setColor( 14 );\r\n\tvar pos = $.getPos();\r\n\t$.setPos( pos.col - 4, pos.row );\r\n\t$.print( \"Stopped!\", true );\r\n\t$.offpress( \"move\", pressMove );\r\n}\r\n"},{"name":"ontouch","description":"Create a touch event.\r\n","isScreen":true,"parameters":["mode","fn","once","hitBox","customData"],"pdata":["The type of touch event. Must be a string value set to start, end, or move.","The function to called when touch occurs. The first parameter will contain the touches data.","[OPTIONAL]. A boolean if true deletes the event after being called one time.","[OPTIONAL]. A hitBox to restrict events occuring outside the box","[OPTIONAL]. This can be used to assign data that will be passed into the callback event. This is useful if you have multiple onmouse commands that use the same callback function."],"seeAlso":["clearEvents","intouch","offtouch","setPinchZoom","startTouch","stopTouch"],"example":"$.screen( \"4x4\" );\r\n$.setPinchZoom( false );\r\n$.ontouch( \"start\", function ( touches ) {\r\n\tvar touch = touches[ 0 ];\r\n\t$.setColor( Math.floor( Math.random() * 9 ) + 1 );\r\n\t$.pset( touch.x, touch.y );\r\n} );\r\n"},{"name":"paint","isScreen":true,"parameters":["x","y","fillColor","tolerance"],"description":"Fills in areas of the screen that are the same color.","pdata":["The horizontal coordinate from where to start the paint algorithm.","The vertical coordinate from where to start the paint algorithm.","The fill color.","[OPTIONAL]. A number between 0 and 1 that allows you to set how sensitive the algorithm isto color differences."],"seeAlso":["arc","bezier","circle","draw","ellipse","line","point","pset","rect","setColor"],"example":"var color = [ 255, 255, 255 ];\r\nvar color2 = [ 25, 85, 125 ];\r\n$.screen( \"256x256\" );\r\n$.setColor( 15 );\r\n$.setPen( \"pixel\", 1, 100 );\r\nfor( i = 0; i < 128; i++ ) {\r\n\tcolor[ 0 ] -= 2;\r\n\tcolor[ 1 ] -= 2;\r\n\tcolor[ 2 ] -= 2;\r\n\t$.setColor( color );\r\n\t$.rect( i, i, 255 - i * 2 + 1, 255 - i * 2 + 1 );\r\n}\r\n$.setPen( \"pixel\", 1 );\r\n$.print( \"Click screen to paint\" );\r\n$.onclick( function ( mouse ) {\r\n\t$.paint( mouse.x, mouse.y, color2, 0.75 );\r\n} );\r\n"},{"name":"play","isScreen":false,"parameters":["playString"],"description":"Plays music notes generated by the Web Audio API.","pdata":["Case insensitive string that contains commands for playing music.","<ul style='margin:0'>\r\n<li><span class='gray'>\"On\"</span> Sets the current octave (from 0 to 9).</li>\r\n<li><span class='gray'>\"&lt;\"</span> Sets the current octave down one octave.</li>\r\n<li><span class='gray'>\"&gt;\"</span> Sets the current octave up one octave.</li>\r\n<li><span class='gray'>\"An\", \"Bn\", \"Cn\", \"Dn\", \"En\", \"Fn\", \"Gn\"</span> Plays the specified note. Length is optional.</li>\r\n<li><span class='gray'>\"+\", \"#\"</span> Makes the preceding note sharp.</li>\r\n<li><span class='gray'>\"-\"</span> Makes the preceding note flat.</li>\r\n<li><span class='gray'>\".\"</span> Period after a note plays 1 1/2 times the note length determined by L * T.</li>\r\n<li><span class='gray'>\"..\"</span> Two periods plays 1 3/4 times the note length determined by L * T.</li>\r\n<li><span class='gray'>\"Nn\"</span> Plays a note by number, 0 is a rest.</li>\r\n<li><span class='gray'>\"Ln\"</span> Sets length of a note from 1 to 64. A whole note is 1 and a quarter note is 4.</li>\r\n<li><span class='gray'>\"MS\"</span> Staccato, each note plays 3/4 of length set by L.</li>\r\n<li><span class='gray'>\"MN\"</span> Normal, each note plays 7/8 of length set by L.</li>\r\n<li><span class='gray'>\"ML\"</span> Legato, each note plays full length set by L.</li>\r\n<li><span class='gray'>\"MOn\"</span> Changes the octave for all subsequent notes. </li>\r\n<li><span class='gray'>\"MAn\"</span> Sets the attack length for each note by percentage (0-100).</li>\r\n<li><span class='gray'>\"MTn\"</span> Sets the sustain length for each note by percentage (0-100).</li>\r\n<li><span class='gray'>\"MDn\"</span> Sets the decay length for each note by percentage (0-100).</li>\r\n<li><span class='gray'>\"MF\"</span> Each note will play completely before playing the next note.</li>\r\n<li><span class='gray'>\"Pn\"</span> Pause in the duration of n quarternotes (n can be 1 to 64) corresponding to L.</li>\r\n<li><span class='gray'>\"Tn\"</span> Tempo sets number of L4 quarter notes per minute (n can be 32 to 255).</li>\r\n<li><span class='gray'>\"Vn\"</span> Sets the volume between 0 and 100 percent.</li>\r\n<li><span class='gray'>\"square\"</span> Sets the oscillator type to a square wave.</li>\r\n<li><span class='gray'>\"sine\"</span> Sets the oscillator type to a sine wave.</li>\r\n<li><span class='gray'>\"triangle\"</span> Sets the oscillator type to a triangle wave.</li>\r\n<li><span class='gray'>\"sawtooth\"</span> Sets the oscillator type to a sawtooth wave.</li>\r\n<li><span class='gray'>\"[[n,n],[n,n]]\"</span> Setup a custom wave table example: [[0,0.8,0.2,1],[1,0,1,0]]. There must be two sets of numbers of equal length.</li>\r\n</ul>\r\n"],"seeAlso":["playAudioPool","setVolume","sound","stopAudioPool","stopPlay"],"returns":"A track id which can be used by the stopPlay command to stop the song.","example":"$.play( `\r\n\ttriangle\r\n\tma5\tmt90 md10\r\n\tmo1 t140 o2 p4 g2 e4. f8 g4 o3 c2 o2 b8 o3 c8 d4 c4 o2 b4 a8 g2.\r\n\to2 b8 o3 c8 d4 c4 o2 b4 a8 a8 g8 o3 c4 o2 e8 e4 g8 a8 g4 f4 e4 f4 g2.\r\n\tg2 e4. f8 g4 o3 c2 o2 b8 o3 c8 d4 c4 o2 b4 a8 g2.\r\n\tsquare\r\n\tv30\r\n\to2 b8 o3 c8 d4 c4 o2 b4 a8 a8 g8 o3 c4 o2 e8 e4 g8 a8 g4 f4 e4 d4 c2.\r\n\tc4 a4 a4 o3 c4 c4 o2 b4 a4 g4 e4 f4 a4 g4 f4 e2.\r\n\tma10 mt80 md10\r\n\tmo-1\r\n\tsawtooth\r\n\tv35\r\n\te8 e8 d4 d4 g4 g4 b4 b4 o3 d4 d8 o2 b8 o3 d4 c4 o2 b4 a4 g4 p4\r\n\tg2 g2 e4. f8 g4 o3 c2 o2 b8 o3 c8 d4 c4 o2 b4 a8 g8 g2.\r\n\to2 b8 o3 c8 d4 c4 o2 b4 a8 a8 g8 o3 c4 o2 e8 e4 g8 a8 g4 f4 e4 d4 c2. p4\r\n\t[\r\n\t\t[   0, 0.4, 0.4,   1,   1,   1, 0.3, 0.7, 0.6, 0.5, 0.9, 0.8 ],\r\n\t\t[   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 ]\r\n\t]\r\n\tv80\r\n\tma20 md20\r\n\tt180 g8 g8 g4 g4 g4 a8 g8 g4 g4 g4 a4 g4 e4 g4 d1\r\n\tt180 g8 g8 g4 g4 g4 a8 g8 g4 g4 g4 g8 g8 g4 a4 b4 o3 c2 c4 p1\r\n` );\r\n","onclose":"$.stopPlay();\r\n"},{"name":"playAudioPool","isScreen":false,"description":"Plays an audio pool sound. ","parameters":["audioId","volume","startTime","duration"],"pdata":["The id of the audio pool to play.","Sets the volume level. Use a float value between 0 and 1.","Allows you to choose a specific time in seconds at which the audio starts.","Max length in seconds the audio will play."],"seeAlso":["createAudioPool","deleteAudioPool","playAudioPool","setVolume","stopAudioPool"],"example":"var bombPool = $.createAudioPool( \"/sounds/bomb.wav\", 1 );\r\n$.ready( function () {\r\n\t$.playAudioPool( bombPool );\r\n} );\r\n"},{"name":"point","isScreen":true,"parameters":["x","y"],"description":"Gets the pixel color from the screen and returns the color palette index.","pdata":["The horizontal coordinate for the pixel","The vertical coordinate for the pixel"],"seeAlso":["findColor","get","getPixel","pset","put","setColor"],"returns":"The color index (integer).","example":"$.screen( \"300x200\" );\r\n$.setColor( 5 );\r\n$.pset( 55, 55 );\r\nvar pixel = $.point( 55, 55 );\r\n$.print( pixel );\r\n"},{"name":"print","isScreen":true,"description":"Prints text onto the screen and moves the text cursor to the next line. Will automatically\r\nvertically scroll the text and screen image up when text cursor reaches the bottom of the screen.\r\n","parameters":["msg","inLine","isCentered"],"pdata":["[OPTIONAL] The text message to print on the screen.","[OPTIONAL] Does not move the text cursor to the next line.","[OPTIONAL] Centers the text horizontally on the screen."],"seeAlso":["cls","getCols","getPos","getPosPx","getRows","setFont","setFontSize","setPos","setPosPx","setWordBreak"],"example":"$.screen( \"300x200\" );\r\n$.print( \"Welcome to PI JS\", false, true );\r\n$.print();\r\n$.print( \"This is a line of text.\" );\r\n$.print( \"This is inline text\", true );\r\n$.print( \". Some more inline text.\", true );\r\n$.print();\r\n$.print( \"The End\" );\r\n"},{"name":"printTable","isScreen":true,"parameters":["items","tableFormat","borderStyle","isCentered"],"description":"Prints a table on the screen.","pdata":["An array of strings that get put into the table from top-left to bottom-right order.","[OPTIONAL] An array of strings that creates the table shape.\r\n\t\t<ul style='margin:0'>\r\n\t\t\t<li><span class='gray'>\"*\"</span> Indicates a table corner.</li>\r\n\t\t\t<li><span class='gray'>\"-\"</span> Indicates a table horiztontal line.</li>\r\n\t\t\t<li><span class='gray'>\"|\"</span> Indicates a table vertical line.</li>\r\n\t\t\t<li><span class='gray'>\"V\"</span> Inside a cell for vertical orientation of the cell.</li>\r\n\t\t</ul>\r\n\t\t","[OPTIONAL] The style of borders. Must be one of the following strings single, double, singleDouble, doubleSingle, or thick.","[OPTIONAL] Horizontally centers the table."],"seeAlso":["print"],"returns":"An array of data with information on each cell. Includes the position of each cell in the table.","example":"var data = [\r\n\t[ \"One\", \"2\", \"3\", \"FourSandwhiches\", \"EggMcMuffins\", \"6a\" ],\r\n\t[ \"Hotdogs\", \"Five\", \"Six\", \"7\", \"8\", \"9\" ],\r\n\t[ \"Seven\", \"Eight\", \"Nine\", \"a\", \"b\", \"c\" ]\r\n];\r\nvar format = [\r\n\t\"*-----------*---*---*---*----*\",\r\n\t\"|           |   |   |V  |V   |\",\r\n\t\"*----*------*---*---*   |    |\",\r\n\t\"|    |      |       |   |    |\",\r\n\t\"|    *------*       |   |    |\",\r\n\t\"*----*      |       |   |    |\",\r\n\t\"|    |      |       |   |    |\",\r\n\t\"*----*------*-------*---*----*\"\r\n];\r\n$.screen( \"300x210\" );\r\n$.setColor( 2 );\r\n$.setFont( 1 );\r\n$.print( \"12345678901234567890123456789012345678901234567890\" );\r\n$.setPos( 18, 2 );\r\n$.printTable( data, format, null, false );\r\n$.printTable( data, format, null, true );\r\n$.printTable( data, null, null );\r\n"},{"name":"pset","isScreen":true,"parameters":["x","y"],"pdata":["The x coordinate of the pixel to set the color.","The y coordinate of the pixel to set the color."],"description":"Sets a pixel on the screen to the current foreground color.","seeAlso":["bezier","circle","draw","ellipse","line","rect","paint","point","setColor"],"example":"$.screen(\"300x200\");\r\n$.setColor(2);\r\n$.pset(148, 101);\r\n$.pset(149, 100);\r\n$.pset(150, 101);\r\n$.pset(151, 100);\r\n$.pset(152, 101);"},{"name":"put","description":"Writes a 2-dimensional array of color values onto the screen. It's counterpart the get statement\r\nwill create an array of color values that you can use with the put statement. Or you can create\r\nyour own array to use.\r\n","isScreen":true,"parameters":["data","x","y","includeZero"],"pdata":["The 2d array of color values.","The horizontal coordinate of the starting position to write the pixels.","The vertical coordinate of the starting position to write the pixels.","If set to true then it will copy 0 (transparent) pixels."],"seeAlso":["get"],"example":"var data = [\r\n\t[  1,  2,  3,  4,  5,  6 ],\r\n\t[  7,  8,  9, 10, 11, 12 ],\r\n\t[ 13, 14, 15, 16, 17, 18 ]\r\n]\r\n$.screen( \"30x20\" );\r\n$.put( data, 1, 1 );\r\n"},{"name":"ready","description":"\tSpecify a function to execute when Pi.js is fully loaded. This is necessary when loading reasources\r\n\tsuch as images and sounds.  When the images get fully loaded the ready function will get called.\r\n\tThe ready function will only get called once, if more resources are loaded later on a seperate ready\r\n\tmethod must be called.\r\n","isScreen":false,"parameters":["fn"],"pdata":["The function you want to execute once loading is completed."],"example":"$.screen( \"300x200\" );\r\n$.loadImage( \"/images/monkey.png\", \"monkey\" );\r\n$.ready( function () {\r\n\t$.drawImage( \"monkey\", 150, 100, 0, 0.5, 0.5 );\r\n} );\r\n"},{"name":"rect","description":"Draws a rectangle to the screen.","isScreen":true,"parameters":["x","y","width","height","fillColor"],"pdata":["The x coordinate of the upper left corner of the rectangle.","The y coordinate of the upper left corner of the rectangle.","The width of the rectangle.","The height of the rectangle."],"seeAlso":["arc","bezier","circle","draw","ellipse","line","paint","point","pset","setColor"],"example":"$.screen( \"300x200\" );\r\n$.setColor( 5 );\r\n$.rect( 15, 15, 150, 100 );\r\n$.rect( 25, 25, 150, 100, 6 );\r\n$.rect( 35, 35, 150, 100, 2 );\r\n"},{"name":"removeAllScreens","description":"Removes all screens from memory and the DOM.","isScreen":false,"parameters":[],"example":"$.screen( \"300x200\" );\r\n$.setColor( 5 );\r\n$.rect( 25, 25, 150, 100, 2 );\r\n$.removeAllScreens();\r\n"},{"name":"removeScreen","description":"Removes the active screen from memory and the DOM.","isScreen":true,"parameters":[],"example":"$.screen( \"300x200\" );\r\n$.setColor( 5 );\r\n$.rect( 25, 25, 150, 100, 2 );\r\n$.removeScreen();\r\n"},{"name":"render","description":"Renders buffered graphics to the screen. Render is called\r\nautomatically when all drawing has been completed at the\r\nof execution so it is generally not needed to call it.\r\nHowever, there are some cases you may need to call the\r\nrender function. Such as if you are drawing to an offscreen\r\ncanvas and then want to draw that canvas onto another canvas.\r\n<br /><br />\r\nRender does not need to be called when not using pixel mode.\r\n","isScreen":true,"parameters":[],"example":"// Create a main screen.\r\nvar screen1 = $.screen( \"320x200\" );\r\n\r\n// Create an offscreen buffer.\r\nvar screen2 = $.screen( \"32x32\", null, true );\r\n\r\n// Draw circle to offscreen buffer.\r\nscreen2.circle( 15, 15, 15, 1 );\r\n\r\n// Without this render the subsequent drawImage\r\n// method would not show the circle.\r\nscreen2.render();\r\n\r\n// Draw the image\r\nscreen1.drawImage( screen2, 100, 100 );\r\n"},{"name":"screen","description":"When the screen command is called it will create a canvas element and when graphics\r\ncommands are called they will manipulate the canvas created. There are three types\r\nof canvas styles that can be created a fullscreen canvas that gets appended to the\r\nbody of the page, a canvas that gets appended to a container element supplied, or\r\nan offscreen canvas.\r\n<br /><br />\r\nThe screen command must be called before any graphics commands can be called.\r\n<br /><br />\r\nThe aspect command allows certain types of screen resolutioins to be used. An x is\r\nused to specify specific pixel dimensions of the screen. A : is used to provide a\r\naspect ratio. An e is to extend the canvas to fill 100% of the screen regardless of\r\naspect ratio. \r\n<br /><br />\r\nExamples:<br />\r\n300x200 = A canvas that has data for 300x200 canvas filled to fit in the screen dimensions with a 3:2 pixel ratio. <br />\r\n16:9 = A canvas that has data and the maximum screen size for the 16:9 aspect ratio. <br />\r\n640e480 = A canvas that tries to fit 640x480 resolution but will extend the data and \r\nthe canvas size to fill the entire screen. <br />\r\n<br />\r\nIf aspect is left blank then the canvas will fill the screen 100% width and height.\r\n","isScreen":false,"parameters":["aspect","container","isOffscreen","willReadFrequently","noStyles","isMultiple","resizeCallback"],"pdata":["[OPTIONAL] Specify the dimensions of the screen using string in the format of: (width)(x/:/e)(height). Ie: 300x200.","[OPTIONAL] A DOM element or a string that contains the id tag of a dom element to use as the container for the canvas.","[OPTIONAL] Is the canvas an offscreen buffer. If true canvas will not show on screen but can be used as an offscreen buffer.","[OPTIONAL] This sets the image data to not use hardware acceleration. This will help speed things up if you are using a lot of pixel mode primative graphics commands. It won't help with drawImage or drawSprite commands.","[OPTIONAL] Create a canvas that has no css applied to it. Just use a default canvas element.","[OPTIONAL] Set the auto size of the canvas to only expand to exact multiples of the target resolution.","[OPTIONAL] A function that will get called after any time the canvas gets resized."],"seeAlso":["getScreen","setScreen"],"example":"$.screen( \"300e200\" );\r\n$.line( 0, 0, $.width(), $.height() );\r\n$.line( 0, $.height(), $.width(), 0 );\r\n"},{"name":"set","description":"Sets any setting command that starts wirth the word \"set\".<br /><br />\r\nExamples: actionKey, bgColor, color, colors, containerBgColor, \r\ndefaultFont, defaultPal, enableContextMenu, errorMode, font,\r\nfontSize, inputCursor, palColor, pen, pinchZoom, pixelMode,\r\npos, posPx, screen, volume, wordBreak.\r\n<br /><br />\r\nNote: Settings are set in the order they appear in the object.\r\nCertain settings such as pos and font could have different results\r\nbased on the order they get set.\r\n","isScreen":true,"parameters":["settings"],"pdata":["An object containing the settings to be set."],"isSet":true,"noParse":true,"example":"$.screen( \"300x200\" );\r\n\r\n// First Set\r\n$.set( {\r\n  \"bgColor\": 10,\r\n  \"color\": 1,\r\n  \"pos\": { \"row\": 15, \"col\": 8 },\r\n  \"font\": 0\r\n} );\r\n$.print( \"Hello World 1!\" );\r\n\r\n// Second Set\r\n$.set( {\r\n  \"pos\": { \"row\": 16, \"col\": 8 },\r\n  \"font\": 1\r\n} );\r\n\r\n// Note that Hello World 2 is a larger font so\r\n// it's row and col position should be lower than\r\n// the above print statement, but because the\r\n// pos setting gets called first it's using the\r\n// row size of font 0 instead of font 1\r\n$.print( \"Hello World 2!\" );\r\n"},{"name":"setActionKey","description":"Disables the default behavior for a key.  This is helpful if you \r\nwant to use a key that has default behaviour that the web browser\r\nyou want to disable.  Such as if you want to use the function keys\r\nin your game/app you would need to call setActionKey to disable the\r\nweb browser default behaviour.\r\n","isScreen":false,"parameters":["key","isEnabled"],"pdata":["The key you wish to disable default behaviour.","[OPTIONAL] If set to true or left blank then it disables default behaviour. False re-enables default behaviour."],"example":"$.screen( \"200x200\" );\r\n$.setActionKey( 17 );\r\n$.setActionKey( \"KeyS\" );\r\nvar interval = setInterval( function () {\r\n\tvar keys, key;\r\n\tkeys = $.inkey();\r\n\t$.cls();\r\n\t$.print( \"Press Ctrl+S.\" );\t\r\n\tkey = $.inkey( 17 );\r\n\tif( key ) {\r\n\t\t$.print( \"Control key is pressed.\" );\r\n\t} else {\r\n\t\t$.print( \"Control key is not pressed.\" );\r\n\t}\r\n\tfor( key in keys ) {\r\n\t\t$.print( \"--------------------------\" );\r\n\t\t$.print( \"key:      \" + keys[ key ].key );\r\n\t\t$.print( \"location: \" + keys[ key ].location );\r\n\t\t$.print( \"code:     \" + keys[ key ].code );\r\n\t\t$.print( \"keyCode:  \" + keys[ key ].keyCode );\r\n\t}\r\n}, 60 );\r\n","onclose":"clearInterval( interval );\r\n"},{"name":"setAutoRender","description":"Auto render will automatically render any graphics drawn using pixel mode\r\nafter any drawing routine is called using a microtask that executes after\r\nthe current execution thread. Auto render is set by default. Use setAutoRender\r\nto enable and disable the auto rendering.\r\n","isScreen":true,"parameters":["isAutoRender"],"pdata":["If set to true then autorender will run"],"example":"$.screen( \"300x200\" );\r\n$.line( 1, 1, 299, 199 );\r\n$.setAutoRender( false );\r\n// Note nothing will render because auto render is disabled\r\n"},{"name":"setBgColor","description":"Sets the background color of the canvas. Any transparent pixels will appear as this color.","isScreen":true,"parameters":["color"],"pdata":["The color value you want as background color."],"seeAlso":["setColor"],"example":"$.screen( \"300x200\" );\r\n$.setColor( \"white\" );\r\n$.line( 0, 0, 300, 200 );\r\n$.setBgColor( \"blue\" );\r\n"},{"name":"setBlendMode","description":"Sets the blend mode when drawing. Normal will set the pixel to the exact color. Blended will mix the colors if the alpha channel of the current color is not 100%.","isScreen":true,"parameters":["mode"],"pdata":["The mode of blend choices are normal or blended."],"seeAlso":["setPen","setPixelMode"],"example":"$.ready(function () {\r\n\t$.screen( \"5x5\" );\r\n\t$.setColor( \"rgba(255,0,0,1)\" );\r\n\t$.pset( 1, 2 );\r\n\t$.pset( 2, 2 );\r\n\t$.pset( 3, 2 );\r\n\t$.render();\r\n\t$.setBlendMode( \"blended\" );\r\n\t$.setColor( \"rgba(0,255,0,0.5)\" );\r\n\t$.pset( 2, 2 );\r\n\t$.setColor( \"rgba(0,0,255,0.5)\" );\r\n\t$.pset( 3, 2 );\r\n});\r\n"},{"name":"setChar","description":"Overwrites a character in the current font set .","isScreen":true,"parameters":["code","data"],"pdata":["The ascii character code you want to replace.","Either a 2d array containing numbers or a hex string that when converted to binary represents the character data."],"seeAlso":["loadFont","setFont"],"example":"$.screen( \"300x200\" );\r\n$.setFont( 2 );\r\n$.setChar( 97, \"1092ba547cc6fe92\" );\r\n$.setChar( 98, \"423c2418187e1818\" );\r\n$.setChar( 99, \"7cd67cfec6aafe00\" );\r\n$.setChar( 100, \"00183c667e5a42c3\" );\r\n$.setChar( 101, \"008199FFDBFFBD18\" );\r\n\r\n$.print( \" abcde f\" );\r\n"},{"name":"setColor","description":"Sets the foreground color.","isScreen":true,"parameters":["color","isAddToPalette"],"pdata":["The color value to set the foreground color.","[OPTIONAL] If set to true and the color is not part of the current color palette then it will add it to the color palette."],"seeAlso":["setBgColor"],"example":"var i, colors, x, y, size;\r\n\r\n$.screen( \"360x300\" );\r\ncolors = $.getPal();\r\nx = 0;\r\ny = 0;\r\nsize = 20;\r\nfor( i = 0; i < colors.length; i++ ) {\r\n\t$.setColor( i );\r\n\t$.rect( x, y, size, size );\r\n\t$.setPosPx( x + 1, y + 4 );\r\n\t$.print( i, true );\r\n\tx += size;\r\n\tif( x >= $.width() ) {\r\n\t\tx = 0;\r\n\t\ty += size;\r\n\t}\r\n}\r\n"},{"name":"setContainerBgColor","description":"Sets the background color of the canvas container.","isScreen":true,"parameters":["color"],"pdata":["The color to set the new background for the canvas container"],"seeAlso":["setBgColor","setColor"],"example":"$.screen( \"300x200\" );\r\n$.print( \"Hello\" );\r\n$.setContainerBgColor( 5 );\r\n","onclose":"document.getElementById(\"canvasContainer\").style.backgroundColor = \"\";\r\n"},{"name":"setDefaultFont","description":"Sets the default font for a new screen.","isScreen":false,"parameters":["fontId"],"pdata":["Font id for the new default "],"seeAlso":["loadFont","print","setFont"],"example":"$.setDefaultFont( 3 );\r\n$.screen( \"300x200\" );\r\n$.print( \"Hello World\" );\r\n"},{"name":"setDefaultInputFocus","description":"Sets the default input focus for keyboard. By default this will be set to the window.  Normally you don't really need to change this but if you have multiple elements on your screen that will compete for keyboard focus then this will come in handy.","isScreen":false,"parameters":["element"],"pdata":["Font id for the new default "],"seeAlso":[],"example":"$.setDefaultInputFocus( window );\r\n$.screen( \"300x200\" );\r\n$.print( \"Keyboard event handlers has been placed on the window object.\" );\r\n"},{"name":"setDefaultPal","description":"Sets the default color palette for new screens.","isScreen":false,"parameters":["pal"],"pdata":["An array of color values to use as new palette."],"example":"var colors = [\r\n\t\"black\", \"red\", \"green\", \"blue\", \r\n\t\"navy\", \"orange\", \"purple\", \"gray\",\r\n\t\"white\", \"pink\", \"brown\", \"cyan\"\r\n];\r\n$.setDefaultPal( colors );\r\n$.screen( \"300x200\" );\r\nfor( var i = 0; i < colors.length; i++ ) {\r\n\t$.setColor( i );\r\n\t$.print( i + \" = \" + colors[ i ] );\r\n}\r\n"},{"name":"setEnableContextMenu","description":"Disables context menu on right click.","isScreen":true,"parameters":["isEnabled"],"pdata":["If set to true context menu will be enabled."],"example":"$.screen( \"300x200\" );\r\n$.print( \"Try right click to see if context menu appears.\" );\r\n$.setEnableContextMenu( false );\r\n"},{"name":"setErrorMode","description":"Sets how Pi.js handles errors by setting an error mode between throw, log, and none.","isScreen":false,"parameters":["mode"],"pdata":["Set to throw, log, or none for the different error modes."],"example":"$.setErrorMode( \"throw\" );\r\n$.screen( \"23514235\" );\r\n"},{"name":"setFont","description":"Sets a font on a screen. The font must already be loaded with the \r\nloadFont command. There are several preloaded fonts that come with\r\nPi.js. Font 0 = 6x6, font 1 = 6x8, font 2 = 8x8, font 3 = 8x14, font\r\n4 = 8x16.\r\n","isScreen":true,"parameters":["fontId"],"pdata":["The id of the font to set. The default fonts loaded are."],"seeAlso":["loadFont","print","setDefaultFont"],"example":"$.screen( \"300x200\" );\r\nfor( var i = 0; i < 4; i++ ) {\r\n\t$.setFont( i );\r\n\t$.print( \"Font - \" + i );\r\n}\r\n"},{"name":"setFontSize","description":"Sets the font-size for bitmap fonts. Can only be used in bitmap fonts.","isScreen":true,"parameters":["width","height"],"pdata":["The width of the font.","The height of the font."],"seeAlso":["loadFont","print","setFont"],"example":"var font = $.loadFont( \"font-block.png\", 10, 10, \"ABCDFGHI\" );\r\n$.ready( function () {\r\n\t$.screen( \"100x100\" );\r\n\t$.setFont( font );\r\n\t$.print( \"ABCD\" );\r\n\t$.setFontSize( 20, 20 );\r\n\t$.print( \"ABCD\" );\r\n} );\r\n"},{"name":"setInputCursor","description":"Sets the cursor for the input command.","isScreen":true,"parameters":["cursor"],"pdata":["A string character or an ascii value from the current font set."],"seeAlso":["cancelInput","input"],"example":"$.screen( \"300x200\" );\r\n$.setInputCursor( \"_\" );\r\n$.input( \"What is your name? \" );\r\n"},{"name":"setPalColor","description":"Sets a color value in the current screen's palette.","isScreen":true,"parameters":["index","color"],"pdata":["The index value of the color to change.","The color value of the new color."],"seeAlso":["findColor","getDefaultPal","getPal","getPixel","setBgColor","setColor","swapColor"],"example":"$.screen( \"300x200\" );\r\n$.setColor( 2 );\r\n$.print( \"Hello\" );\r\n$.setPalColor( 2, \"purple\" );\r\n$.print( \"Hello\" );\r\n"},{"name":"setPen","description":"Sets the pen to use for drawing operations.","isScreen":true,"parameters":["pen","size","noise"],"pdata":["A string that is either circle, square, or pixel for the shape of the pen.","A number for the size of the pen.","[OPTIONAL] Noise is either a number between 0 and 128 or an array of 4 values between 0 and 128 that represents the range of color values for red/green/blue/alpha. Noise does not work for anti-alias drawing mode."],"seeAlso":["setBlendMode","setPixelMode"],"example":"$.screen( \"300x200\" );\r\n$.setPen( \"circle\", 5, [ 32, 16, 8, 0 ] );\r\n$.line( 30, 80, 270, 50 );\r\n$.pset( 150, 100 );\r\n$.draw( \"BR15 D15 R100 D30 L15\" );\r\n"},{"name":"setPinchZoom","isScreen":false,"parameters":["isEnabled"],"pdata":["Set to true if you want to enable this is the default state. Set to false if you want to disable zoom."],"description":"Enables or disables pinch zoom. This is recommended when working with touch if you want to disable zoom.\r\n","seeAlso":["intouch","ontouch","startTouch","stopTouch"],"example":"$.screen( \"4x4\" );\r\n$.setPinchZoom( false );\r\n$.ontouch( \"start\", function ( touches ) {\r\n\tvar touch = touches[ 0 ];\r\n\t$.setColor( Math.floor( Math.random() * 9 ) + 1 );\r\n\t$.pset( touch.x, touch.y );\r\n} );\r\n"},{"name":"setPixelMode","description":"Toggles between pixel mode and anti-aliased drawing modes.","isScreen":true,"parameters":["isEnabled"],"pdata":["If set to true use the pixel mode otherwise use anit-aliased mode."],"seeAlso":["setBlendMode","setPen"],"example":"$.screen( \"300x200\" );\r\n$.setColor( 4 );\r\n$.line( 30, 80, 270, 50 );\r\n$.setPixelMode( false );\r\n$.line( 30, 120, 270, 90 );\r\n"},{"name":"setPos","description":"Sets the position of the print cursor using columns and rows based on the font size.","isScreen":true,"parameters":["col","row"],"pdata":["The column value where to move the print cursor.","The row value where to move the print cursor."],"seeAlso":["getPos","getPosPx","print","setPosPx"],"example":"$.screen( \"300x200\" );\r\n$.setPos( 5, 10 );\r\n$.print( \"X\" );\r\n$.setPos( 10, 15 );\r\n$.print( \"Y\" );\r\n"},{"name":"setPosPx","description":"Sets the position of the print cursor using pixels.","isScreen":true,"parameters":["x","y"],"pdata":["The horziontal coordinate for the new print cursor position.","The vertical coordinate for the new print cursor position."],"seeAlso":["getPos","getPosPx","print","setPos"],"example":"$.screen( \"300x200\" );\r\n$.setPosPx( 5, 10 );\r\n$.print( \"X\" );\r\n$.setPosPx( 10, 15 );\r\n$.print( \"Y\" );\r\n"},{"name":"setScreen","description":"Sets the default screen for which gaphics operations will get applied.","isScreen":false,"parameters":["screen"],"pdata":["The id or screenObject of the screen to select."],"seeAlso":["getScreen","screen"],"example":"$.screen( \"300x200\" );\r\nvar spriteScreen = $.screen( \"32x32\", null, true );\r\n$.setScreen( 0 );\r\n$.setColor( 2 );\r\n$.rect( 134, 84, 33, 33 );\r\n$.setScreen( spriteScreen );\r\n$.circle( 16, 16, 16, 9 );\r\n$.render();\r\n$.setScreen( 0 );\r\n$.drawImage( spriteScreen, 134, 84 );\r\n"},{"name":"setVolume","description":"Sets the master volume for all sound commands.","isScreen":false,"parameters":["volume"],"pdata":["The volume between 0 and 1 that sets the master volume."],"seeAlso":["play","playAudioPool","sound"],"example":"$.setVolume( 0.75 );\r\n$.play( \"Q1o3L8ED+ED+Eo2Bo3DCL2o2A\" );\r\n"},{"name":"setWordBreak","descripttion":"Toggle word break setting between breaking on spaces or breaking in the middle of words.","isScreen":true,"parameters":["isEnabled"],"pdata":["If set to false then break in the middle of words otherwise break on spaces."],"seeAlso":["print"],"example":"var msg = \"abcdefghijklmnopqrstuvwxyz \" +\r\n\t\"abcdefghijklmnopqrstuvwxyz \" +\r\n\t\"abcdefghijklmnopqrstuvwxyz\";\r\n$.screen( \"300x200\" );\r\n$.print( msg );\r\n$.setWordBreak( false );\r\n$.print();\r\n$.print( msg );\r\n"},{"name":"sound","description":"Plays a sound based on a frequency and duration. Sounds will only play as the \r\nresults of an event from the user, so any attempt to play a sound on page \r\nload will not work. If attack + delay is greater than 1 then there may be a \r\nclicking sound.\r\n","isScreen":false,"parameters":["frequency","duration","volume","oType","delay","attack","decay"],"pdata":["The sound frequency.","How long to play the sound.","[OPTIONAL] The volume of the sound.","[OPTIONAL] The type of oscillator to use for the sound ie: (sawtooth, sine, square, triangle).","[OPTIONAL] A pause before the sound plays.","[OPTIONAL] How long to ramp up to the full volume, prevents clicking sound.","[OPTIONAL] How long to ramp down to 0 volume, prevents clicking sound."],"seeAlso":["play","playAudioPool","sound"],"example":"var data = [\r\n  392, 8, \"My \", 659, 8, \"Bon-\", 587, 8, \"nie \", 523, 8, \"lies \", 587, 8,\r\n  \"o-\", 523, 8, \"ver \", 440, 8, \"the \", 392, 8, \"o-\", 330, 32, \"cean\\n\",\r\n  392, 8, \"My \", 659, 8, \"Bon-\", 587, 8, \"nie \", 523, 8, \"lies \", 523, 8,\r\n  \"o-\", 494, 8, \"ver \", 523, 8, \"the \", 587, 40, \"sea\\n\", 392, 8, \"My \",\r\n  659, 8, \"Bon-\", 587, 8, \"nie\", 523, 8, \" lies \", 587, 8, \"o-\", 523, 8,\r\n  \"ver \", 440, 8, \"the \", 392, 8, \"o-\", 330, 32, \"cean\\n\", 392, 8, \"Oh \",\r\n  440, 8, \"bring \", 587, 8, \"back \", 523, 8, \"my \", 494, 8, \"Bon-\", 440,\r\n  8, \"nie \", 494, 8, \"to \", 523, 32, \"me\"\r\n];\r\nvar i;\r\nvar totalDuration = 0;\r\nvar volume = 0.15;\r\nvar attackRate = 0.01;\r\nvar decayRate = 0.1;\r\nvar sustainRate = 0.89;\r\nvar printTimeouts = [];\r\n\r\n$.screen( \"300x200\" );\r\nfor( i = 0; i < data.length; i += 3 ) {\r\n  var freq = data[ i ];\r\n  var duration = data[ i + 1 ] / 18.2;\r\n  var sustain = duration * sustainRate;\r\n  var attack = duration * attackRate;\r\n  var decay = duration * decayRate;\r\n  var word = data[ i + 2 ];\r\n  $.sound(\r\n    freq, sustain, volume, \"sawtooth\", totalDuration, attack, decay\r\n  );\r\n  printWord( word, totalDuration );\r\n  totalDuration += duration;\r\n}\r\n\r\nfunction printWord( word, delay ) {\r\n\tprintTimeouts.push( setTimeout( function () {\r\n\t\t$.print( word, word.indexOf( \"\\n\" ) === -1 );\r\n\t}, delay * 1000 ) );\r\n}\r\n","onclose":"$.stopSound();\r\nfor( var i = 0; i < printTimeouts.length; i++ ) {\r\n  clearTimeout( printTimeouts[ i ] );\r\n}\r\n"},{"name":"startKeyboard","description":"Starts tracking keyboard input. This gets automatically called the \r\nfirst time any keyboard method (inkey, onkey, input) gets called so\r\ncalling startKeyboard is not necessary unless you explicitly call\r\nstopKeyboard.\r\n","isScreen":false,"parameters":[],"seeAlso":["inkey","input","onkey","stopKeyboard"],"example":"$.screen( \"300x200\" );\r\n\r\nvar hitboxColor = 2;\r\nvar hitbox = {\r\n\t\"x\": 175,\r\n\t\"y\": 75,\r\n\t\"width\": 100,\r\n\t\"height\": 100\r\n};\r\nvar msg = \"\";\r\nvar isGreen = true;\r\n\r\n$.onclick( clickBox, false, hitbox );\r\n$.onkey( \"any\", \"down\", function ( key ) {\r\n\tmsg = \"You pressed \" + key.key + \".\";\r\n\tdrawScreen();\r\n} );\r\n$.onkey( \"any\", \"up\", function ( key ) {\r\n\tmsg = \"\";\r\n\tdrawScreen();\r\n} );\r\n\r\ndrawScreen();\r\n\r\nfunction drawScreen() {\r\n\t$.cls();\r\n\t$.setColor( 7 );\r\n\t$.print( \"Press any key\" );\r\n\t$.print( \"Click the box to toggle keyboard.\" );\r\n\t$.print( msg );\r\n\t$.setColor( hitboxColor );\r\n\t$.rect( hitbox );\r\n}\r\n\r\nfunction clickBox() {\r\n\tisGreen = !isGreen;\r\n\tif( isGreen ) {\r\n\t\thitboxColor = 2;\r\n\t\t$.startKeyboard();\r\n\t} else {\r\n\t\t$.stopKeyboard();\r\n\t\thitboxColor = 4;\r\n\t}\r\n\tdrawScreen();\r\n}\r\n"},{"name":"startMouse","description":"Starts tracking mouse input. This gets automatically called the \r\nfirst time any mouse method (inmouse, onmouse) gets called so\r\ncalling startMouse is not necessary unless you explicitly call\r\nstopMouse.\r\n","isScreen":true,"parameters":[],"seeAlso":["offmouse","onmouse","stopMouse"],"example":"var isMouseEnabled = true;\r\n$.screen( \"300x200\" );\r\n$.onkey( \"m\", \"down\", function () {\r\n\tisMouseEnabled = !isMouseEnabled;\r\n\tif( isMouseEnabled ) {\r\n\t\t$.startMouse();\r\n\t} else {\r\n\t\t$.stopMouse();\r\n\t}\r\n\tdrawScreen();\r\n} );\r\n$.onmouse( \"move\", function ( data ) {\r\n\t$.setPosPx( data.x, data.y );\r\n\tvar pos = $.getPos();\r\n\t$.setPos( pos.col, pos.row );\r\n\t$.setColor( 1 );\r\n\t$.print( \"+\", true );\r\n} );\r\n\r\ndrawScreen();\r\n\r\nfunction drawScreen() {\r\n\t$.cls();\r\n\t$.setColor( 7 );\r\n\t$.print();\r\n\t$.print( \" Press 'm' key to toggle mouse\" );\r\n\t$.print( isMouseEnabled ? \" Mouse Enabled\" : \" Mouse Disabled\" );\r\n\t$.setPen( \"square\", 2 );\r\n\t$.setColor( isMouseEnabled ? 2 : 4 );\r\n\t$.rect( 0, 0, 300, 200 );\t\r\n}\r\n"},{"name":"startTouch","description":"Starts the touch event listeners for the screen. This will get called automatically when any\r\ntouch command gets called.\r\n","isScreen":true,"parameters":[],"seeAlso":["intouch","ontouch","setPinchZoom","stopTouch"],"example":"$.screen( \"4x4\" );\r\n$.startTouch();\r\n$.setPinchZoom( false );\r\n$.ontouch( \"start\", function ( touches ) {\r\n\tvar touch = touches[ 0 ];\r\n\t$.setColor( Math.floor( Math.random() * 9 ) + 1 );\r\n\t$.pset( touch.x, touch.y );\r\n} );\r\n"},{"name":"stopAudioPool","description":"Stops and audio pool if it is currently playing audio.","isScreen":false,"parameters":["audioId"],"pdata":["The audio id of the audio pool."],"example":"var bombPool = $.createAudioPool( \"/sounds/bomb.wav\", 1 );\r\nvar timeout = 0;\r\n$.ready( function () {\r\n\t$.playAudioPool( bombPool );\r\n\ttimeout = setTimeout( function () {\r\n\t\t$.stopAudioPool( bombPool );\r\n\t}, 500 );\r\n} );\r\n","onclose":"clearTimeout( timeout );\r\n"},{"name":"stopKeyboard","description":"Stops tracking keyboard input.\r\n","isScreen":false,"parameters":[],"seeAlso":["inkey","input","onkey","startKeyboard"],"example":"$.screen( \"300x200\" );\r\n\r\nvar hitbox = {\r\n\t\"x\": 175,\r\n\t\"y\": 75,\r\n\t\"width\": 100,\r\n\t\"height\": 100\r\n};\r\nvar msg = \"\";\r\nvar isGreen = true;\r\n\r\n$.onclick( clickBox, false, hitbox );\r\n$.onkey( \"any\", \"down\", function ( key ) {\r\n\tmsg = \"You pressed \" + key.key + \".\";\r\n\tdrawScreen();\r\n} );\r\n$.onkey( \"any\", \"up\", function ( key ) {\r\n\tmsg = \"\";\r\n\tdrawScreen();\r\n} );\r\n\r\ndrawScreen();\r\n\r\nfunction drawScreen() {\r\n\t$.cls();\r\n\t$.setColor( 7 );\r\n\t$.print( \"Press any key\" );\r\n\t$.print( \"Click the box to toggle keyboard.\" );\r\n\t$.print( isGreen ? \"Keyboard enabled\" : \"Keyboard disabled\" );\r\n\t$.print( msg );\r\n\t$.setColor( isGreen ? 2 : 4 );\r\n\t$.rect( hitbox );\r\n}\r\n\r\nfunction clickBox() {\r\n\tisGreen = !isGreen;\r\n\tif( isGreen ) {\r\n\t\t$.startKeyboard();\r\n\t} else {\r\n\t\t$.stopKeyboard();\r\n\t}\r\n\tdrawScreen();\r\n}\r\n"},{"name":"stopMouse","description":"Stops tracking mouse input.","isScreen":true,"parameters":[],"seeAlso":["offmouse","onmouse","startMouse"],"example":"var isMouseEnabled = true;\r\n$.screen( \"300x200\" );\r\n$.onkey( \"m\", \"down\", function () {\r\n\tisMouseEnabled = !isMouseEnabled;\r\n\tif( isMouseEnabled ) {\r\n\t\t$.startMouse();\r\n\t} else {\r\n\t\t$.stopMouse();\r\n\t}\r\n\tdrawScreen();\r\n} );\r\n$.onmouse( \"move\", function ( data ) {\r\n\t$.setPosPx( data.x, data.y );\r\n\tvar pos = $.getPos();\r\n\t$.setPos( pos.col, pos.row );\r\n\t$.setColor( pos.col );\r\n\t$.print( \"+\", true );\r\n} );\r\n\r\ndrawScreen();\r\n\r\nfunction drawScreen() {\r\n\t$.cls();\r\n\t$.setColor( 7 );\r\n\t$.print();\r\n\t$.print( \" Press 'm' key to toggle mouse\" );\r\n\t$.print( isMouseEnabled ? \" Mouse Enabled\" : \" Mouse Disabled\" );\r\n\t$.setPen( \"square\", 2 );\r\n\t$.setColor( isMouseEnabled ? 2 : 4 );\r\n\t$.rect( 0, 0, 300, 200 );\t\r\n}\r\n"},{"name":"stopPlay","description":"Stops music created by the play command. Leave first parameter blank to stop all play tracks.","isScreen":false,"parameters":["trackId"],"pdata":["[OPTIONAL] the trackId to stop playing."],"example":"var song = \"sawtooth v80 MO1\" + \r\n\t\"t200l4o2mneel2el4eel2el4egl3cl8dl1el4ffl3fl8fl4fel2el8eel4edde\" +\r\n\t\"l2dgl4eel2el4eel2el4egl3cl8dl1el4ffl3fl8fl4fel2el8efl4ggfdl2c\";\r\n$.play( song );\r\nvar timeout = setTimeout( function () {\r\n\t$.stopPlay();\r\n}, 3500 );\r\n","onclose":"$.stopPlay();\r\nclearTimeout( timeout );\r\n"},{"name":"stopSound","description":"Stops sounds made from the sound command. Leave soundId blank to stop all sounds.","isScreen":false,"parameters":["soundId"],"pdata":["The soundId to be stopped."],"example":"var duration = 0.05;\r\nvar volume = 0.5;\r\nvar decay = 0.03;\r\nvar totalDuration = 0;\r\nvar i;\r\nfor( i = 0; i < 30; i++ ) {\r\n\t$.sound(\r\n\t\t240 + i * 8, duration, volume, \"sawtooth\", totalDuration, 0,\r\n\t\tdecay\r\n\t);\r\n\ttotalDuration += duration + decay;\r\n}\r\n\r\nvar timeout = setTimeout( function () {\r\n\t$.stopSound();\r\n}, 750 );\r\n","onclose":"$.stopSound();\r\nclearTimeout( timeout );\r\n"},{"name":"stopTouch","description":"Stops the touch event listeners for the screen.\r\n","isScreen":true,"parameters":[],"seeAlso":["intouch","ontouch","setPinchZoom","startTouch"],"example":"$.screen( \"100x100\" );\r\n$.startTouch();\r\n$.setPinchZoom( false );\r\nvar count = 5;\r\n$.print( count + \" touches left\" );\r\n$.ontouch( \"start\", function ( touches ) {\r\n\t$.setColor( Math.floor( Math.random() * 9 ) + 1 );\r\n\t$.print( --count + \" touches left\" );\r\n\tvar touch = touches[ 0 ];\r\n\t$.pset( touch.x, touch.y );\r\n\tif( count === 0 ) {\r\n\t\t$.stopTouch();\r\n\t}\r\n} );\r\n"},{"name":"swapColor","description":"Swaps a color in the screens palette with a new color and updates the screen colors.","isScreen":true,"parameters":["oldColor","newColor"],"pdata":["The color that needs to be swapped out.","The new color."],"seeAlso":["getPal","setPalColor"],"example":"$.screen( \"300x200\" );\r\n$.setColor( 2 );\r\n$.print( \"HELLO\" );\r\n$.swapColor( 2, \"red\" );\r\n"},{"name":"width","description":"Gets the width of the screen.","isScreen":true,"parameters":[],"seeAlso":["height","screen"],"returns":"The width of the screen.","example":"$.screen( \"300x200\" );\r\n$.print( \"Width: \" + $.width() );\r\n"}]